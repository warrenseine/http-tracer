@page "/"
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.DependencyInjection
@implements IAsyncDisposable

<table id="requests" class="table table-striped table-bordered table-hover table-sm">
    <thead class="thead-light">
    <tr>
        <th scope="col">Name</th>
        <th scope="col" class="status">Status</th>
        <th scope="col">Type</th>
        <th scope="col">Size</th>
        <th scope="col">Time</th>
        <th scope="col" class="waterfall">Waterfall</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var request in _requestStore.Requests)
    {
        <tr>
            <td title="@request.Url">@request.Name</td>
            <td>@request.Status</td>
            <td>@request.ContentType</td>
            <td class="size">@request.ContentLength</td>
            <td class="time">@request.Time</td>
            <td class="waterfall">
                <Waterfall Request="@request" InitialTime="@_initialTime"></Waterfall>
            </td>
        </tr>
    }
    </tbody>
</table>

@code {
    private HubConnection _hubConnection;
    private readonly RequestStore _requestStore = new RequestStore();
    private readonly DateTimeOffset _initialTime = DateTimeOffset.Now;

    private void React(Func<bool> handler)
    {
        try
        {
            if (handler()) StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/Trace"))
            .AddJsonProtocol()
            .Build();

        _hubConnection.On<HttpTraceEvent>("PushHttpTrace", messageEvent =>
            React(() => _requestStore.ReceiveEvent(messageEvent)));

        await _hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await _hubConnection.DisposeAsync();
    }
}
